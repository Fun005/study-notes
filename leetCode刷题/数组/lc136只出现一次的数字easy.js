/**
 *
    给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

    你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。

    示例 1 ：

    输入：nums = [2,2,1]

    输出：1

    示例 2 ：

    输入：nums = [4,1,2,1,2]

    输出：4

    示例 3 ：

    输入：nums = [1]

    输出：1



    提示：

    1 <= nums.length <= 3 * 104
    -3 * 104 <= nums[i] <= 3 * 104
    除了某个元素只出现一次以外，其余每个元素均出现两次。
 *
 */


/**
 *
    如果不考虑时间复杂度和空间复杂度的限制，这道题有很多种解法，可能的解法有如下几种。

    使用集合存储数字。遍历数组中的每个数字，如果集合中没有该数字，则将该数字加入集合，如果集合中已经有该数字，则将该数字从集合中删除，最后剩下的数字就是只出现一次的数字。

    使用哈希表存储每个数字和该数字出现的次数。遍历数组即可得到每个数字出现的次数，并更新哈希表，最后遍历哈希表，得到只出现一次的数字。

    使用集合存储数组中出现的所有数字，并计算数组中的元素之和。由于集合保证元素无重复，因此计算集合中的所有元素之和的两倍，即为每个元素出现两次的情况下的元素之和。由于数组中只有一个元素出现一次，其余元素都出现两次，因此用集合中的元素之和的两倍减去数组中的元素之和，剩下的数就是数组中只出现一次的数字。

    上述三种解法都需要额外使用 O(n) 的空间，其中 n 是数组长度。

    如何才能做到线性时间复杂度和常数空间复杂度呢？

    答案是使用位运算。对于这道题，可使用异或运算 ⊕。异或运算有以下三个性质。

    任何数和 0 做异或运算，结果仍然是原来的数，即 a⊕0=a
    任何数和其自身做异或运算，结果是 0，即 a⊕a=0
    异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b

 */

/**
* @param {number[]} nums
* @return {number}
*/
var singleNumber = function (nums) {
    let res = 0
    for (num of nums) {
        res ^= num
    }
    return res
};


/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber2 = function (nums) {
    const cache = new Set()
    for (num of nums) {
        if (cache.has(num)) {
            cache.delete(num)
        } else {
            cache.add(num)
        }
    }
    return cache.values().next().value
};